import util.assert


assert_equal [].size, 0
assert_equal [1, 2, 3].size, 3
assert_equal [].empty, true

assert_true [1, 2, 3] == [1, 2, 3]
assert_true [1, 2, 3] != [1, 2, 4]
assert_true [1, 2, 3] < [1, 2, 3, 4]
assert_true [1, 2, 3] < [1, 2, 4]

assert_equal [1, 2] + [3, 4], [1, 2, 3, 4]
assert_equal [2, 4, 1, 3].sort(), [1, 2, 3, 4]
assert_equal [2, 4, 1, 3].sort((a, b) => b<=>a), [4, 3, 2, 1]
assert_equal [2, 4, 1, 3].sort_by(a => -a), [4, 3, 2, 1]

assert_equal [1, 2, 3].to_set(), Set(1, 2, 3)

assert_true 1 in [1, 2, 3]
assert_false 100 in [1, 2, 3]

let list = []
list.push 1
list.push 2
assert_equal list, [1, 2]
list.unshift 3
assert_equal list, [3, 1, 2]
assert_equal list.pop(), 2
assert_equal list, [3, 1]
assert_equal list.shift(), 3
assert_equal list, [1]
list.clear()
assert_equal list, []

let list2 = [1, 3, 5, 4, 2]
list2.sort_self()
assert_equal list2, [1, 2, 3, 4, 5]
list2.map_self(i => i * 2)
assert_equal list2, [2, 4, 6, 8, 10]
list2.select_self(i => i % 4 != 0)
assert_equal list2, [2, 6, 10]

